/**
 * @file Firestore Security Rules
 * @description This ruleset is in PROTOTYPING mode. It prioritizes a secure authorization model
 *              while minimizing data validation to allow for rapid schema iteration.
 *
 * Core Philosophy:
 *   - Unauthenticated access is disallowed unless explicitly permitted.
 *   - Data validation is minimized to accelerate development. Only authorization and
 *     relational integrity are validated.
 *
 * Data Structure:
 *   - Data is stored in a flat structure with top-level collections for each entity.
 *   - No user-specific data trees are implemented.
 *
 * Key Security Decisions:
 *   - Listing operations are generally open, assuming data is intended for public consumption.
 *   - Write operations are disallowed unless rules are explicitly defined.
 *   - The professor_profile collection might require authentication based on its description.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to institution data. Write access is denied.
     * @path /institutions/{institutionId}
     * @allow (get, list) Allow anyone to read institution data.
     * @deny (create, update, delete) Deny anyone to write institution data.
     * @principle Allows public reads; prohibits writes.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to department data. Write access is denied.
     * @path /departments/{departmentId}
     * @allow (get, list) Allow anyone to read department data.
     * @deny (create, update, delete) Deny anyone to write department data.
     * @principle Allows public reads; prohibits writes.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to student data. Write access is denied.
     * @path /students/{studentId}
     * @allow (get, list) Allow anyone to read student data.
     * @deny (create, update, delete) Deny anyone to write student data.
     * @principle Allows public reads; prohibits writes.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to attendance data. Write access is denied.
     * @path /attendances/{attendanceId}
     * @allow (get, list) Allow anyone to read attendance data.
     * @deny (create, update, delete) Deny anyone to write attendance data.
     * @principle Allows public reads; prohibits writes.
     */
    match /attendances/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to evaluation criteria data. Write access is denied.
     * @path /evaluation_criteria/{evaluationCriteriaId}
     * @allow (get, list) Allow anyone to read evaluation criteria data.
     * @deny (create, update, delete) Deny anyone to write evaluation criteria data.
     * @principle Allows public reads; prohibits writes.
     */
    match /evaluation_criteria/{evaluationCriteriaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to grade data. Write access is denied.
     * @path /grades/{gradeId}
     * @allow (get, list) Allow anyone to read grade data.
     * @deny (create, update, delete) Deny anyone to write grade data.
     * @principle Allows public reads; prohibits writes.
     */
    match /grades/{gradeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows only authenticated users to read professor profile data. Write access is denied.
     * @path /professor_profile/{profileId}
     * @allow (get) Allow anyone to read the data if they are authenticated.
     * @allow (list) Allow anyone to list the data if they are authenticated.
     * @deny (create, update, delete) Deny anyone to write professor profile data.
     * @principle Requires authentication for reads; prohibits writes.
     */
    match /professor_profile/{profileId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}