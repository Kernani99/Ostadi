/**
 * @file Firestore Security Rules
 * @description This ruleset is in prototyping mode, data shape validation will be skipped.
 *
 * Core Philosophy:
 * All collections are publicly readable. Write access requires authentication.
 *
 * Data Structure:
 * - /institutions/{institutionId}: Stores institution data.
 * - /departments/{departmentId}: Stores department data.
 * - /students/{studentId}: Stores student data.
 * - /attendances/{attendanceId}: Stores attendance records.
 * - /evaluation_criteria/{evaluationCriteriaId}: Stores evaluation criteria.
 * - /grades/{gradeId}: Stores grades.
 * - /professor_profile/{profileId}: Stores professor profile data.
 *
 * Key Security Decisions:
 * - Public read access is enabled for all collections.
 * - All write operations require the user to be authenticated.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read institution data, but only authenticated users can write.
     * @path /institutions/{institutionId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read department data, but only authenticated users can write.
     * @path /departments/{departmentId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read student data, but only authenticated users can write.
     * @path /students/{studentId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read attendance data, but only authenticated users can write.
     * @path /attendances/{attendanceId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /attendances/{attendanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read evaluation criteria data, but only authenticated users can write.
     * @path /evaluation_criteria/{evaluationCriteriaId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /evaluation_criteria/{evaluationCriteriaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read grade data, but only authenticated users can write.
     * @path /grades/{gradeId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /grades/{gradeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read professor profile data, but only authenticated users can write.
     * @path /professor_profile/{profileId}
     * @allow (get, list): Any user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny (create, update, delete): If the user is not authenticated.
     * @principle Allows public reads with authenticated writes.
     */
    match /professor_profile/{profileId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // ===================== Helper functions =====================

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}