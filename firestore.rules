/**
 * @fileoverview Firestore Security Rules for the Attendance Tracking App.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode and prioritizes ease of data access for rapid development.
 * As such, read access is generally open, but write access is completely restricted.
 * This is NOT suitable for production and must be updated with proper authorization logic.
 *
 * Data Structure:
 * The Firestore database contains several top-level collections, including:
 * - /institutions/{institutionId}
 * - /departments/{departmentId}
 * - /students/{studentId}
 * - /attendances/{attendanceId}
 * - /evaluation_criteria/{evaluationCriteriaId}
 * - /grades/{gradeId}
 *
 * Key Security Decisions:
 * - All collections are publicly readable.
 * - All write operations (create, update, delete) are denied. This will be changed after the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read institution data, but prevents any writes.
     * @path /institutions/{institutionId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read department data, but prevents any writes.
     * @path /departments/{departmentId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read student data, but prevents any writes.
     * @path /students/{studentId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read attendance data, but prevents any writes.
     * @path /attendances/{attendanceId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /attendances/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read evaluation criteria data, but prevents any writes.
     * @path /evaluation_criteria/{evaluationCriteriaId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /evaluation_criteria/{evaluationCriteriaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read grade data, but prevents any writes.
     * @path /grades/{gradeId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can write data.
     * @principle Allows open reads for prototyping but restricts all writes.
     */
    match /grades/{gradeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}