/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default. It leans towards open read access where the data model explicitly permits it.
 * For professor profiles, it requires authentication.
 *
 * Data Structure:
 * The database contains collections for institutions, departments, students, attendance, evaluation criteria, grades, and professor profiles.
 *
 * Key Security Decisions:
 * - Unauthenticated read access is permitted for institutions, departments, students, attendance, evaluation criteria, and grades collections.
 * - listing on user scoped subcollections is allowed by default for the owner.
 * - Authentication is required for reading professor profiles, and writes are disallowed until further requirements are defined.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read institution data. Writes are disallowed.
     * @path /institutions/{institutionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for institutions.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read department data. Writes are disallowed.
     * @path /departments/{departmentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for departments.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read student data. Writes are disallowed.
     * @path /students/{studentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for students.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read attendance data. Writes are disallowed.
     * @path /attendances/{attendanceId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for attendance records.
     */
    match /attendances/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read evaluation criteria data. Writes are disallowed.
     * @path /evaluation_criteria/{evaluationCriteriaId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for evaluation criteria.
     */
    match /evaluation_criteria/{evaluationCriteriaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read grade data. Writes are disallowed.
     * @path /grades/{gradeId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for grades.
     */
    match /grades/{gradeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows only authenticated users to read professor profile data. Writes are disallowed.
     * @path /professor_profile/{profileId}
     * @allow (get)
     * @deny (create, update, delete, list)
     * @principle Requires authentication to read professor profiles and restricts write access.
     */
    match /professor_profile/{profileId} {
      allow get: if isSignedIn();
      allow create, update, delete, list: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}