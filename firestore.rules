/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode and prioritizes developer velocity.  It allows open reads and writes.
 *
 * Data Structure:
 * All data is stored in top-level collections: `/institutions`, `/departments`, `/students`, `/attendances`, `/evaluation_criteria`, `/grades`, and `/professor_profile`.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections are publicly readable to facilitate initial development and data exploration.
 * - Unrestricted Writes: All authenticated users can create, update, and delete any document. This is for rapid prototyping ONLY.  A production system MUST implement stricter authorization.
 * - No Data Validation: Data validation is disabled for this prototyping phase, allowing for flexible schema changes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write institution data.
     * @path /institutions/{institutionId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write department data.
     * @path /departments/{departmentId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write student data.
     * @path /students/{studentId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write attendance data.
     * @path /attendances/{attendanceId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /attendances/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write evaluation criteria data.
     * @path /evaluation_criteria/{evaluationCriteriaId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /evaluation_criteria/{evaluationCriteriaId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write grade data.
     * @path /grades/{gradeId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /grades/{gradeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write professor profile data.
     * @path /professor_profile/{profileId}
     * @allow (get, list)
     * @allow (create, update, delete)
     * @principle Public read, authenticated write
     */
    match /professor_profile/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    //------------------- Helper functions -------------------

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}